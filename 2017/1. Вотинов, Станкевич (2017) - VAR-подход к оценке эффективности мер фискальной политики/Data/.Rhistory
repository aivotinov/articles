data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_mj_sp +
avg_sp  + over_200 + d_holi_m +
max_n_sp ,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_mj_sp +
avg_sp  + d_holi_m +
max_n_sp ,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_mj_sp +
avg_sp  +
max_n_sp ,
data = dat, family = "binomial")
summary(m)
p <- predict(m, type='response')
pr <- prediction(p, dat$DTP_f)
perf <- performance(pr,"tpr","fpr")
plot(perf, xlab = "", ylab = "")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
hist(dat$loss_sum_ratio[dat$loss_sum_ratio > 0], breaks = 50)
dat$DTP_f <- as.numeric(dat$loss_sum_ratio > 0 & dat$loss_sum_ratio < 0.05)
dat$DTP_freq <- as.numeric(dat$DTP_f / (dat$mileage/1000000))
n <- vector(length = ncol(dat))
pv <- vector(length = ncol(dat))
coef <- vector(length = ncol(dat))
for(i in 9:43){
tmp <- data.frame(y = dat$DTP_f, x = dat[,i])
m <- logitmfx(y ~ x, data = tmp)
n[i] <- colnames(dat)[i]
pv[i] <- m$mfxest[4]
coef[i] <- m$mfxest[1]
}
res <- (cbind(n, as.numeric(coef), as.numeric(pv))[8:46,])
colnames(res) <- c("Name", "MFX", "P-value")
res[order(as.numeric(res[,3])),]
m <- glm(DTP_f ~ mileage + avg_sp + max_mj_sp + max_n_sp + s3 + s2 +
s1 + a1,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + avg_sp + max_mj_sp + max_n_sp + s3 +
s1 + a1,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + avg_sp + max_mj_sp + max_n_sp +
s1 + a1,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + avg_sp + max_mj_sp + s3 +
s1 + a1,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + avg_sp + max_mj_sp +
s1 + a1,
data = dat, family = "binomial")
summary(m)
p <- predict(m, type='response')
pr <- prediction(p, dat$DTP_f)
perf <- performance(pr,"tpr","fpr")
plot(perf, xlab = "", ylab = "")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
dat$DTP_f <- as.numeric(dat$loss_sum_ratio > 0.05 & dat$loss_sum_ratio < 0.2)
dat$DTP_freq <- as.numeric(dat$DTP_f / (dat$mileage/1000000))
n <- vector(length = ncol(dat))
pv <- vector(length = ncol(dat))
coef <- vector(length = ncol(dat))
for(i in 9:43){
tmp <- data.frame(y = dat$DTP_f, x = dat[,i])
m <- logitmfx(y ~ x, data = tmp)
n[i] <- colnames(dat)[i]
pv[i] <- m$mfxest[4]
coef[i] <- m$mfxest[1]
}
res <- (cbind(n, as.numeric(coef), as.numeric(pv))[8:46,])
colnames(res) <- c("Name", "MFX", "P-value")
res[order(as.numeric(res[,3])),]
m <- glm(DTP_f ~ mileage + a1 + max_n_sp +
d_night_m + max_sp + over_200 + d_holi_m + s1 + sp3,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_n_sp +
d_night_m + max_sp + over_200 + s1 + sp3,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_n_sp +
d_night_m + max_sp + over_200 + sp3,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_n_sp +
d_night_m + over_200 + sp3,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ mileage + a1 + max_n_sp +
d_night_m + sp3,
data = dat, family = "binomial")
summary(m)
p <- predict(m, type='response')
pr <- prediction(p, dat$DTP_f)
perf <- performance(pr,"tpr","fpr")
plot(perf, xlab = "", ylab = "")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
dat$DTP_f <- as.numeric(dat$loss_sum_ratio > 0.2)
dat$DTP_freq <- as.numeric(dat$DTP_f / (dat$mileage/1000000))
n <- vector(length = ncol(dat))
pv <- vector(length = ncol(dat))
coef <- vector(length = ncol(dat))
for(i in 9:43){
tmp <- data.frame(y = dat$DTP_f, x = dat[,i])
m <- logitmfx(y ~ x, data = tmp)
n[i] <- colnames(dat)[i]
pv[i] <- m$mfxest[4]
coef[i] <- m$mfxest[1]
}
res <- (cbind(n, as.numeric(coef), as.numeric(pv))[8:46,])
colnames(res) <- c("Name", "MFX", "P-value")
res[order(as.numeric(res[,3])),]
m <- glm(DTP_f ~ max_ej_sp + max_n_sp + s1 +
sp3 + day_m_pr + a1 + m_pr_over_130,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ max_ej_sp + s1 +
sp3 + day_m_pr + a1 + m_pr_over_130,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ max_ej_sp + s1 +
sp3 + day_m_pr + a1,
data = dat, family = "binomial")
summary(m)
m <- glm(DTP_f ~ max_ej_sp + s1 +
sp3 + day_m_pr,
data = dat, family = "binomial")
summary(m)
p <- predict(m, type='response')
pr <- prediction(p, dat$DTP_f)
perf <- performance(pr,"tpr","fpr")
plot(perf, xlab = "", ylab = "")
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
nams <- colnames(dat)[5:43]
full_names <- c("Общий пробег", "Количество поездок в день", "Частота превышений скорости на 0-20 км/ч", "Частота превышений скорости на 20-40 км/ч", "Частота превышений скорости на 40-60 км/ч", "Частота ускорений 1 порядка", "Частота ускорений 2 порядка", "Частота ускорений 3 порядка",  "Частота торможений 1 порядка", "Частота торможений 2 порядка", "Частота торможений 3 порядка",   "Частота боковых ускорений 1 порядка", "Частота боковых ускорений 2 порядка", "Частота боковых ускорений 3 порядка",    "Доля поездок короче 10 км", "Доля поездок короче 30 км", "Доля поездок больше 200 км", "Доля поездок больше 400 км", "Доля времени, когда машина используется", "Средняя скорость", "Средняя длина поездки", "Среднее время поездки", "Средний пробег по будням", "Средний пробег в дневное время", "Средний пробег в вечерний час пик", "Средний пробег в утренний час пик", "Средний пробег в выходные", "Средний пробег в ночное время", "Среднедневной пробег", "Доля пробега днем", "Доля пробега в вечерний час пик", "Максимальная скорость в вечерний час пик", "Максимальная скорость в утренний час пик", "Максимальная скорость в ночное время", "Максимальная скорость", "Доля пробега со скоростью меньше 20 км/ч", "Доля пробега со скоростью ниже 60 км/ч", "Доля пробега со скоростью больше 100 км/ч", "Доля пробега со скоростью больше 130 км/ч")
cbind(nams, full_names)
library(BMR)
install.packages("devtools")
library(devtools)
install_github("kthohr/BMR")
install_github("kthohr/BMR")
install.packages("iterators")
install.packages("foreach")
install_github("kthohr/BMR")
library(BMR)
data(BMRVARData)
prior<-c(0.9,0.95,0.95)
testbvarm <- BVARM(USMacroData[,2:4],prior,p=4,constant=T,irf.periods=20,
keep=10000,burnin=5000,VType=1,
HP1=0.5,HP2=0.5,HP3=10)
plot(testbvarm,save=F)
IRF(testbvarm,save=F)
library(optimx)
calc_X_a <- function(pa, pb, alpha, rho, pX){
denom <- ( pa ^ (1 + 1 / (rho - 1)) * alpha ^ ( -1 / (rho - 1)) + pb ^ (1 + 1 / (rho - 1)) * (1 - alpha) ^ ( -1 / (rho - 1)) )
return(pX * pa ^ (1 / (rho - 1)) * alpha ^ ( -1 / (rho - 1)) / denom)
}
calc_X_b <- function(pa, pb, alpha, rho, pX){
denom <- ( pa ^ (1 + 1 / (rho - 1)) * alpha ^ ( -1 / (rho - 1)) + pb ^ (1 + 1 / (rho - 1)) * (1 - alpha) ^ ( -1 / (rho - 1)) )
return(pX * pb ^ (1 / (rho - 1)) * (1 - alpha) ^ ( -1 / (rho - 1)) / denom)
}
calc_P <- function(pa, pb, alpha, rho){
a1 <- alpha ^ {-1 / (rho - 1)}
aa1 <- (1 - alpha) ^ {-1 / (rho - 1)}
pa1 <- pa ^ {rho / (rho - 1)}
pb1 <- pb ^ {rho / (rho - 1)}
return((a1 * pa1 + aa1 * pb1)^{(1 - rho) / rho})
}
calc_X <- function(xa, xb, alpha, rho){
return( (alpha * (xa ^ rho) + (1 - alpha) * (xb ^ rho))^{1/rho} )
}
gen_series <- function(T, st, sd){
temp <- vector(length = T)
temp[1] <- st
for (i in 2:T){
temp[i] <- temp[i - 1] + rnorm(1, 0, sd)
}
return(temp)
}
decomposition_target_function <- function(pars, T, pC, pJ, pG, pIm, pEx, w = 0){
pars[1] -> aC
pars[2] -> aJ
pars[3] -> aG
pars[4] -> aIm
pars[5] -> aEx
pars[6] -> rhoC
pars[7] -> rhoJ
pars[8] -> rhoG
pars[9] -> rhoIm
pars[10] -> rhoEx
pars[11:(10+T)] -> pa
pars[(11+T):(10+T*2)] -> pb
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
t_n <- 0
#  if(w > 0){
#    for(k in 2:T){
#      t_n <- t_n + abs(pa[k]/pa[k-1] - 1) + abs(pb[k]/pb[k-1] - 1)
#    }
#  }
return(tC + tJ + tG + tIm + tEx + w*t_n)
}
gen_pars_starts <- function(pars_lower, pars_upper){
temp <- pars_lower
for (i in 1 : length(pars_lower)){
temp[i] <- runif(1, pars_lower[i], pars_upper[i])
}
return(temp)
}
T <- 69
#####SIMULATION#####
#General controls
T <- 69
pa_vector <- abs(gen_series(T = T, st = 1, sd = 0.1))
pb_vector <- abs(gen_series(T = T, st = 1, sd = 0.1))
#C
pC_vector <- abs(gen_series(T = T, st = 1000, sd = 10))
alpha_start <- 0.5
rho_start <- 3
price_C_vector <- calc_P(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start)
Ca_vector <- calc_X_a(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pC_vector)
Cb_vector <- calc_X_b(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pC_vector)
C_vector <- calc_X(xa = Ca_vector, xb = Cb_vector, alpha = alpha_start, rho = rho_start)
#J
pJ_vector <- abs(gen_series(T = T, st = 2000, sd = 10))
alpha_start <- 0.5
rho_start <- 4
price_J_vector <- calc_P(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start)
Ja_vector <- calc_X_a(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pJ_vector)
Jb_vector <- calc_X_b(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pJ_vector)
J_vector <- calc_X(xa = Ja_vector, xb = Jb_vector, alpha = alpha_start, rho = rho_start)
#G
pG_vector <- abs(gen_series(T = T, st = 1000, sd = 10))
alpha_start <- 0.2
rho_start <- 3
price_G_vector <- calc_P(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start)
Ga_vector <- calc_X_a(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pG_vector)
Gb_vector <- calc_X_b(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pG_vector)
G_vector <- calc_X(xa = Ga_vector, xb = Gb_vector, alpha = alpha_start, rho = rho_start)
#Im
pIm_vector <- abs(gen_series(T = T, st = 1000, sd = 10))
alpha_start <- 0.8
rho_start <- 3
price_Im_vector <- calc_P(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start)
Ima_vector <- calc_X_a(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pIm_vector)
Imb_vector <- calc_X_b(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pIm_vector)
Im_vector <- calc_X(xa = Ima_vector, xb = Imb_vector, alpha = alpha_start, rho = rho_start)
#Ex
pEx_vector <- abs(gen_series(T = T, st = 1000, sd = 10))
alpha_start <- 0.1
rho_start <- 3
price_Ex_vector <- calc_P(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start)
Exa_vector <- calc_X_a(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pEx_vector)
Exb_vector <- calc_X_b(pa = pa_vector, pb = pb_vector, alpha = alpha_start, rho = rho_start, pX = pEx_vector)
Ex_vector <- calc_X(xa = Exa_vector, xb = Exb_vector, alpha = alpha_start, rho = rho_start)
#TRY TO ESTIMATE
pa_start <- c(1:T) / 100
pb_start <- c(T:1) / 100
aC_start <- 0.5
rhoC_start <- 2
aJ_start <- 0.5
rhoJ_start <- 2
aG_start <- 0.5
rhoG_start <- 2
aIm_start <- 0.5
rhoIm_start <- 2
aEx_start <- 0.5
rhoEx_start <- 2
pars_start <- c(aC_start, aJ_start, aG_start, aIm_start, aEx_start, rhoC_start, rhoJ_start, rhoG_start, rhoIm_start, rhoEx_start, pa_start, pb_start)
pars_real <- c(0.5, 0.5, 0.2, 0.8, 0.1, 3, 4, 3, 3, 3, pa_vector, pb_vector)
pars_lower <- c(rep(0, 5), rep(1.01, 5),  rep(0.01, T), rep(0.01, T))
pars_upper <- c(rep(1, 5), rep(10, 5), rep(5, T), rep(5, T))
res <- optimx(pars_start, decomposition_target_function, lower = pars_lower, upper = pars_upper, method = "spg",
T = T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
res
decomposition_target_function(pars_start, T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
decomposition_target_function(pars_start*2, T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
pars <- pars_start
pars[1] -> aC
pars[2] -> aJ
pars[3] -> aG
pars[4] -> aIm
pars[5] -> aEx
pars[6] -> rhoC
pars[7] -> rhoJ
pars[8] -> rhoG
pars[9] -> rhoIm
pars[10] -> rhoEx
pars[11:(10+T)] -> pa
pars[(11+T):(10+T*2)] -> pb
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
tC
pC <- price_C_vector
pJ <- price_J_vector
pG <- price_G_vector
pEx <- price_Ex_vector
pIm <- price_Im_vector
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
tC
tJ
tG
tIm
tEx
pars[20] <- pars[20] * 1.2
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
tC
tJ
tG
pars
pa
pb
alpha
`alpha <- aC`
alpha <- a
alpha <- aC
rho <- rhoC
a1 <- alpha ^ {-1 / (rho - 1)}
aa1 <- (1 - alpha) ^ {-1 / (rho - 1)}
pa1 <- pa ^ {rho / (rho - 1)}
pb1 <- pb ^ {rho / (rho - 1)}
a1 * pa1 + aa1 * pb1)^{(1 - rho)
a1 * pa1 + aa1 * pb1
pa[3] <- pa[3] * 1.1
a1 <- alpha ^ {-1 / (rho - 1)}
aa1 <- (1 - alpha) ^ {-1 / (rho - 1)}
pa1 <- pa ^ {rho / (rho - 1)}
pb1 <- pb ^ {rho / (rho - 1)}
a1 * pa1 + aa1 * pb1
rho
(1 - rho) / rho
(a1 * pa1 + aa1 * pb1)^{-(1 - rho) / rho}
pa[3] <- pa[3] * 1.1
a1 <- alpha ^ {-1 / (rho - 1)}
aa1 <- (1 - alpha) ^ {-1 / (rho - 1)}
pa1 <- pa ^ {rho / (rho - 1)}
pb1 <- pb ^ {rho / (rho - 1)}
(a1 * pa1 + aa1 * pb1)^{-(1 - rho) / rho}
calc_P <- function(pa, pb, alpha, rho){
a1 <- alpha ^ {-1 / (rho - 1)}
aa1 <- (1 - alpha) ^ {-1 / (rho - 1)}
pa1 <- pa ^ {rho / (rho - 1)}
pb1 <- pb ^ {rho / (rho - 1)}
return((a1 * pa1 + aa1 * pb1)^{-(1 - rho) / rho})
}
pars[1] -> aC
pars[2] -> aJ
pars[3] -> aG
pars[4] -> aIm
pars[5] -> aEx
pars[6] -> rhoC
pars[7] -> rhoJ
pars[8] -> rhoG
pars[9] -> rhoIm
pars[10] -> rhoEx
pars[11:(10+T)] -> pa
pars[(11+T):(10+T*2)] -> pb
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
c(tC, tJ, tG, tIm, tEx)
pars[20] <- pars[20] * 1.2
pars[1] -> aC
pars[2] -> aJ
pars[3] -> aG
pars[4] -> aIm
pars[5] -> aEx
pars[6] -> rhoC
pars[7] -> rhoJ
pars[8] -> rhoG
pars[9] -> rhoIm
pars[10] -> rhoEx
pars[11:(10+T)] -> pa
pars[(11+T):(10+T*2)] -> pb
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
c(tC, tJ, tG, tIm, tEx)
tC + tJ + tG + tIm + tEx + w*t_n
decomposition_target_function <- function(pars, T, pC, pJ, pG, pIm, pEx, w = 0){
pars[1] -> aC
pars[2] -> aJ
pars[3] -> aG
pars[4] -> aIm
pars[5] -> aEx
pars[6] -> rhoC
pars[7] -> rhoJ
pars[8] -> rhoG
pars[9] -> rhoIm
pars[10] -> rhoEx
pars[11:(10+T)] -> pa
pars[(11+T):(10+T*2)] -> pb
pC_hat <- calc_P(pa, pb, aC, rhoC)
pJ_hat <- calc_P(pa, pb, aJ, rhoJ)
pG_hat <- calc_P(pa, pb, aG, rhoG)
pIm_hat <- calc_P(pa, pb, aIm, rhoIm)
pEx_hat <- calc_P(pa, pb, aEx, rhoEx)
tC <- sum(((pC - pC_hat) / pC )^2)
tJ <- sum(((pJ - pJ_hat) / pJ )^2)
tG <- sum(((pG - pG_hat) / pG )^2)
tIm <- sum(((pIm - pIm_hat) / pIm )^2)
tEx <- sum(((pEx - pEx_hat) / pEx )^2)
t_n <- 0
#  if(w > 0){
#    for(k in 2:T){
#      t_n <- t_n + abs(pa[k]/pa[k-1] - 1) + abs(pb[k]/pb[k-1] - 1)
#    }
#  }
return(tC + tJ + tG + tIm + tEx)
}
res <- optimx(pars_start, decomposition_target_function, lower = pars_lower, upper = pars_upper, method = "spg",
T = T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
res
#TRY RANDOM STARTS
niter <- 100
results <- matrix(nrow = niter, ncol = length(res))
for (iter in 1:niter){
pars_start <- gen_pars_starts(pars_lower, pars_upper)
res <- optimx(pars_start, decomposition_target_function, lower = pars_lower, upper = pars_upper, method = "spg",
T = T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
results[iter, ] <- as.numeric(res)
print(paste("iteration ", iter, ": ", res[152], sep = ""))
}
pars_start
decomposition_target_function(pars_start, T, pC = price_C_vector, pJ = price_J_vector, pG = price_G_vector, pIm = price_Im_vector, pEx = price_Ex_vector)
library(BMR)
?IRF
library(BMR)
.irf_var
irf_var
3*2/(10*9)
1/15
24*11
sum(c(1:24))
sum(c(1:23))
sum(c(1:15))
12*23
install.packages("rgpui")
symbolicRegressionUi()
library(rgpui)
symbolicRegressionUi()
setwd("C:/Users/Иван/Dropbox/Мультипликатор государственных расходов/Data")
library(BMR)
library(devtools)
install_github("kthohr/BMR")
install.packages("devtools")
install.packages("RcppArmadillo")
library(devtools)
install_github("kthohr/BMR")
library(BMR)
